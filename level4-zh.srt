1
00:00:00,180 --> 00:00:01,400
我是 Gregg Pollack，您正在收看的是

2
00:00:01,400 --> 00:00:03,500
“僵尸学 Rails”第四课

3
00:00:03,560 --> 00:00:06,940
（唱）丢掉手上的脑子和肠子

4
00:00:06,940 --> 00:00:10,050
要停止兽性，学习一点 Rails 知识了

5
00:00:10,050 --> 00:00:12,910
因为我们要与时俱进

6
00:00:12,910 --> 00:00:17,110
这是 Envy Labs 出品的“僵尸学 Rails”教学视频

7
00:00:17,800 --> 00:00:21,500
本课我们要介绍“控制器”

8
00:00:22,540 --> 00:00:25,210
这是前面看过的程序组件

9
00:00:25,210 --> 00:00:27,220
最底下的一层是模型

10
00:00:27,220 --> 00:00:33,000
这里是视图，现在我们要介绍的则是控制器

11
00:00:34,980 --> 00:00:37,480
还记得吗，上一课这家伙突然跑出来说了句

12
00:00:37,480 --> 00:00:39,600
代码写的好烂

13
00:00:39,800 --> 00:00:42,860
我们使用布局修正了一处比较烂的地方

14
00:00:42,860 --> 00:00:47,300
代码烂的第二个原因是，没有合理使用控制器

15
00:00:47,930 --> 00:00:50,120
当请求到达 Rails 时

16
00:00:50,120 --> 00:00:56,150
在渲染视图前首先要经由控制器处理

17
00:00:56,290 --> 00:00:59,990
控制器代码保存在 app/controllers 目录下

18
00:00:59,990 --> 00:01:05,460
本例控制器文件的名字是 tweets_controller.rb

19
00:01:05,615 --> 00:01:11,970
tweets 这个词出现在路径、控制器名和视图目录名中

20
00:01:11,970 --> 00:01:14,610
并不是什么巧合

21
00:01:14,610 --> 00:01:17,460
这只是 Rails 的另一个智能约定

22
00:01:19,150 --> 00:01:23,250
在微博控制器中，定义了 TweetsController 类

23
00:01:23,250 --> 00:01:25,880
这个类继承自 ApplicationController

24
00:01:26,760 --> 00:01:31,360
同在这个文件中，可能还定义了 show 方法

25
00:01:32,990 --> 00:01:36,880
同样并非巧合，show 方法对应的是 show 视图

26
00:01:37,840 --> 00:01:40,500
现在，我们应该如何改进代码呢

27
00:01:40,500 --> 00:01:47,310
我们要把查询微博的代码拿出来放入控制器中

28
00:01:47,310 --> 00:01:49,660
Rails 的另一个最佳实践方式是

29
00:01:49,660 --> 00:01:53,630
把对模型的访问都放在控制器层

30
00:01:53,630 --> 00:01:57,160
这么做视图中就不会有很多 Ruby 代码了

31
00:01:58,190 --> 00:02:02,150
当收到请求时，首先经由控制器

32
00:02:02,150 --> 00:02:09,530
执行 show 动作，然后渲染 show 视图

33
00:02:10,070 --> 00:02:11,560
啊，这个僵尸又出现了

34
00:02:11,560 --> 00:02:14,100
他说，小心变量的作用域

35
00:02:14,910 --> 00:02:19,060
你可能会想，这个 tweet 变量在 show 方法中

36
00:02:19,060 --> 00:02:21,590
在视图中怎么能用呢

37
00:02:21,590 --> 00:02:22,720
嗯，问得好

38
00:02:22,990 --> 00:02:25,160
这时就要用到实例变量了

39
00:02:25,730 --> 00:02:30,950
在 Rails 中，我们在变量 tweet 前加上 @ 符号

40
00:02:30,950 --> 00:02:37,580
这个符号就表明我们要在视图中引用这个变量

41
00:02:37,580 --> 00:02:41,660
可以看到，每次引用 tweet 变量时前面都有 @ 符号

42
00:02:42,250 --> 00:02:45,920
下面来探索一下打破 Rails 常规的方法

43
00:02:45,920 --> 00:02:50,700
除了 show 视图，如果还想渲染 status 视图要怎么做呢

44
00:02:51,840 --> 00:02:55,200
我们要添加一些代码告知 Rails

45
00:02:55,200 --> 00:02:58,800
要渲染的是 status 动作对应的视图

46
00:02:58,920 --> 00:03:02,800
这只是打破 Rails 常规的一个小例子

47
00:03:02,800 --> 00:03:05,220
你要知道默认约定总是可以重设的

48
00:03:06,610 --> 00:03:10,320
如果只想显示 ID 为 1 的微博，用这段代码就行了

49
00:03:10,320 --> 00:03:13,660
不过很明显，用户还想查看其他微博

50
00:03:13,660 --> 00:03:16,800
用户会在地址中指定微博的 ID，就像这样

51
00:03:17,250 --> 00:03:19,590
我们应该怎么修改代码实现这种需求呢

52
00:03:20,060 --> 00:03:22,570
如果使用这种地址

53
00:03:22,570 --> 00:03:29,290
后面的数字会存储在 params Hash 的 id 键下

54
00:03:29,290 --> 00:03:33,850
所以，收到这个请求时就创建了 params Hash

55
00:03:34,600 --> 00:03:39,000
在这个 Hash 中，键 id 对应的值为 1

56
00:03:39,000 --> 00:03:40,480
那么要查询的值就是 1

57
00:03:40,480 --> 00:03:44,220
在 show 动作中，写入 params[:id]

58
00:03:44,220 --> 00:03:46,020
就会查询请求的微博了

59
00:03:47,660 --> 00:03:51,730
在地址中包含请求参数或者发送 POST 请求

60
00:03:51,730 --> 00:03:55,800
Rails 都会把参数存入 params Hash 中

61
00:03:55,950 --> 00:03:58,230
这就是 params Hash

62
00:03:58,600 --> 00:04:04,340
如果要获取 status 的值，可以创建一个新变量

63
00:04:04,340 --> 00:04:07,350
把 status 的值设为 params[:status]

64
00:04:09,140 --> 00:04:10,000
在 Rails 中经常会看到

65
00:04:10,000 --> 00:04:13,450
params Hash 嵌套了多个 Hash

66
00:04:13,780 --> 00:04:15,900
可以看到这个 Hash 中有个 tweet Hash

67
00:04:15,900 --> 00:04:18,550
在 tweet Hash 中保存了 status 的值

68
00:04:18,829 --> 00:04:21,560
如果要用这个状态创建新微博

69
00:04:21,560 --> 00:04:24,430
就要使用 params[:tweet][:status]

70
00:04:24,790 --> 00:04:27,400
不过，要注意，在调用 create 方法时

71
00:04:27,400 --> 00:04:29,160
已经有了这个 Hash

72
00:04:29,370 --> 00:04:33,360
因此就可以直接传入 params[:tweet]

73
00:04:35,590 --> 00:04:39,460
如果要使用 XML 或 JSON 格式显示微博该怎么做呢

74
00:04:39,460 --> 00:04:41,810
以 Web 服务为例

75
00:04:41,810 --> 00:04:44,480
这是一篇微博的 XML 格式

76
00:04:45,660 --> 00:04:48,780
这是一篇微博的 JSON 格式

77
00:04:49,570 --> 00:04:51,840
这些是显示这两种格式要用的地址

78
00:04:51,840 --> 00:04:54,320
在地址后面加上 .xml 可以获得 XML 格式

79
00:04:54,320 --> 00:04:56,000
加上 .json 可以获得 JSON 格式

80
00:04:56,000 --> 00:04:58,910
这是 Rails 提供的约定

81
00:04:58,910 --> 00:05:01,400
在 show 动作中要添加一些代码

82
00:05:01,700 --> 00:05:04,700
我们要加入 respond_to 块

83
00:05:05,680 --> 00:05:10,500
在块中，我们说这个动作可以响应 HTML

84
00:05:11,210 --> 00:05:16,280
还可以响应 XML，渲染微博的 XML 格式

85
00:05:16,820 --> 00:05:21,480
还可以响应 JSON，渲染微博的 JSON 格式

86
00:05:22,280 --> 00:05:23,050
我们只需要这些代码

87
00:05:23,050 --> 00:05:27,100
现在 Rails 已经可以渲染 XML 和 JSON 格式的微博了

88
00:05:28,130 --> 00:05:33,520
开发 Rails 程序时要实现一系列常用的动作

89
00:05:33,520 --> 00:05:34,740
我们来一一介绍

90
00:05:35,330 --> 00:05:37,840
如果实现了 index 动作，会列出所有的微博

91
00:05:38,490 --> 00:05:40,670
show 动作用来显示单篇微博

92
00:05:40,670 --> 00:05:43,910
new 动作显示创建新微博的表单

93
00:05:43,910 --> 00:05:46,010
edit 动作显示编辑微博的表单

94
00:05:46,400 --> 00:05:47,940
create 动作创建新微博

95
00:05:48,340 --> 00:05:49,650
update 动作更新微博

96
00:05:50,000 --> 00:05:51,840
destroy 动作删除微博

97
00:05:53,370 --> 00:05:57,120
下面要介绍在我们的程序中如何实现简单地授权功能

98
00:05:57,870 --> 00:06:00,700
当我在微博列表页面点击编辑链接后

99
00:06:01,220 --> 00:06:03,930
执行的是 edit 动作

100
00:06:04,690 --> 00:06:09,560
在 edit 动作中，显然要取回想编辑的微博

101
00:06:10,440 --> 00:06:14,420
然后，默认情况下渲染 edit 视图

102
00:06:16,570 --> 00:06:19,360
这是在浏览器中看到的编辑表格

103
00:06:19,760 --> 00:06:22,500
我想实现的是，当我点击编辑链接

104
00:06:22,500 --> 00:06:24,450
如果没有权限，会显示

105
00:06:24,450 --> 00:06:27,080
抱歉，您无法编辑别人的微博

106
00:06:27,080 --> 00:06:30,260
我们要怎么做才能实现这种功能呢

107
00:06:31,080 --> 00:06:34,640
现在显示的是 edit 动作，我要介绍一些新概念

108
00:06:34,930 --> 00:06:36,920
首先是会话

109
00:06:37,350 --> 00:06:40,480
简单地说，会话针对单个用户，用法类似 Hash

110
00:06:40,780 --> 00:06:44,620
每次请求都会为当前用户存储会话

111
00:06:44,960 --> 00:06:46,300
会话经常保存在 cookie 中

112
00:06:46,610 --> 00:06:54,840
我们要检查会话中的 zombie_id 是否和该微博的不一样

113
00:06:54,840 --> 00:06:56,460
如果这篇微博不属于当前用户

114
00:06:56,980 --> 00:07:00,000
就显示一个 Flash 消息

115
00:07:00,940 --> 00:07:03,200
Falsh 就是向用户发送的消息

116
00:07:03,200 --> 00:07:06,700
我们就显示一个 Flash 消息说

117
00:07:06,700 --> 00:07:08,200
抱歉，您不能修改该微博

118
00:07:08,790 --> 00:07:13,340
显示 Flash 消息后，我们想转向回微博列表页面

119
00:07:13,340 --> 00:07:16,650
我们要调用 redirect_to 方法回送 501 转向响应

120
00:07:16,650 --> 00:07:18,620
然后再渲染其他的动作

121
00:07:18,820 --> 00:07:24,880
Rails 3 提供了新句法，可以把转向和提示消息写在同一行

122
00:07:25,626 --> 00:07:28,260
在浏览器中查看是否可用之前

123
00:07:28,660 --> 00:07:32,200
先打开布局文件，加入一个 if 语句

124
00:07:32,200 --> 00:07:37,700
如果有提示消息，则在布局中显示出来

125
00:07:38,980 --> 00:07:42,620
现在回到微博列表页面，点击 edit 链接

126
00:07:42,620 --> 00:07:45,600
如果没有权限，会显示一个提示信息

127
00:07:46,750 --> 00:07:48,620
如果仔细看一下微博控制器

128
00:07:48,620 --> 00:07:52,640
会发现除了 edit 动作之外，其他一些动作也要权限限制

129
00:07:52,930 --> 00:07:56,880
edit update destroy 动作都需要同样地权限

130
00:07:57,290 --> 00:08:00,660
那么，在控制器中怎么避免重复加入权限限制代码呢

131
00:08:00,660 --> 00:08:02,750
如果仔细观察这几个动作

132
00:08:02,750 --> 00:08:05,850
会发现在每个动作中都获取了微博

133
00:08:05,945 --> 00:08:09,030
调用了 Tweet.find 获取了当前微博

134
00:08:09,030 --> 00:08:11,590
在 Rails 中怎样避免代码重复呢

135
00:08:11,590 --> 00:08:16,290
我们可以把这行代码拿出来，移动到上面，定义单独的方法

136
00:08:16,290 --> 00:08:18,890
定义为 get_tweet 方法

137
00:08:18,890 --> 00:08:21,580
然后再加入 before_filter :get_tweet

138
00:08:21,580 --> 00:08:24,720
这行代码告知控制器，执行各动作前调用该方法

139
00:08:24,720 --> 00:08:30,000
我们可以指定只用于 edit update destroy 动作

140
00:08:31,530 --> 00:08:34,679
接下来要抽出权限限制相关的代码

141
00:08:34,679 --> 00:08:37,000
这些是会话相关的代码

142
00:08:37,450 --> 00:08:41,600
放入 check_auth 方法中

143
00:08:42,280 --> 00:08:46,530
和之前一样，加入 before_filter :check_auth

144
00:08:46,800 --> 00:08:49,500
只用于 edit update destroy 动作

145
00:08:49,740 --> 00:08:53,120
至此，三个动作都实现了权限限制功能

146
00:08:53,340 --> 00:08:55,560
接下来要做课后练习了

147
00:08:55,560 --> 00:08:59,420
尸体越堆越多，僵尸也更频繁地发布微博了

148
00:08:59,420 --> 00:09:03,770
翻译制作：@andor_chen on Twitter

